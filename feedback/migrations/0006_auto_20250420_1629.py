# Generated by Django 4.2.7 on 2025-04-20 10:59

from django.db import migrations, models
import django.db.models.deletion
import feedback.models
from django.conf import settings
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('feedback', '0005_auto_20250420_1626'),
    ]

    operations = [
        # Create FeedbackTag table
        migrations.CreateModel(
            name='FeedbackTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Feedback Tag',
                'verbose_name_plural': 'Feedback Tags',
            },
        ),
        
        # Create Feedback table if it doesn't exist, or add content field if it does
        migrations.RunSQL(
            """
            CREATE TABLE IF NOT EXISTS feedback_feedback (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title varchar(200) NOT NULL,
                content text NOT NULL,
                rating integer NOT NULL,
                status varchar(20) NOT NULL,
                is_anonymous bool NOT NULL,
                created_at datetime NOT NULL,
                updated_at datetime NOT NULL,
                attachment varchar(100) NULL,
                category_id bigint NOT NULL REFERENCES feedback_feedbackcategory (id),
                user_id bigint NOT NULL REFERENCES accounts_user (id)
            );
            """,
            """
            DROP TABLE IF EXISTS feedback_feedback;
            """
        ),
        
        # Create FeedbackResponse table
        migrations.RunSQL(
            """
            CREATE TABLE IF NOT EXISTS feedback_feedbackresponse (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                content text NOT NULL,
                created_at datetime NOT NULL,
                updated_at datetime NOT NULL,
                is_internal bool NOT NULL,
                attachment varchar(100) NULL,
                feedback_id bigint NOT NULL REFERENCES feedback_feedback (id),
                responder_id bigint NOT NULL REFERENCES accounts_user (id)
            );
            """,
            """
            DROP TABLE IF EXISTS feedback_feedbackresponse;
            """
        ),
        
        # Create FeedbackComment table
        migrations.RunSQL(
            """
            CREATE TABLE IF NOT EXISTS feedback_feedbackcomment (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                comment text NOT NULL,
                created_at datetime NOT NULL,
                updated_at datetime NOT NULL,
                attachment varchar(100) NULL,
                is_internal bool NOT NULL,
                author_id bigint NULL REFERENCES accounts_user (id),
                feedback_id bigint NOT NULL REFERENCES feedback_feedback (id)
            );
            """,
            """
            DROP TABLE IF EXISTS feedback_feedbackcomment;
            """
        ),
        
        # Create FeedbackHistory table
        migrations.RunSQL(
            """
            CREATE TABLE IF NOT EXISTS feedback_feedbackhistory (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                old_status varchar(20) NULL,
                new_status varchar(20) NOT NULL,
                notes text NULL,
                timestamp datetime NOT NULL,
                changed_by_id bigint NOT NULL REFERENCES accounts_user (id),
                feedback_id bigint NOT NULL REFERENCES feedback_feedback (id),
                new_assigned_to_id bigint NULL REFERENCES accounts_user (id),
                old_assigned_to_id bigint NULL REFERENCES accounts_user (id)
            );
            """,
            """
            DROP TABLE IF EXISTS feedback_feedbackhistory;
            """
        ),
        
        # Create Notification table
        migrations.RunSQL(
            """
            CREATE TABLE IF NOT EXISTS feedback_notification (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                notification_type varchar(50) NOT NULL,
                message text NOT NULL,
                is_read bool NOT NULL,
                created_at datetime NOT NULL,
                feedback_id bigint NOT NULL REFERENCES feedback_feedback (id),
                user_id bigint NOT NULL REFERENCES accounts_user (id)
            );
            """,
            """
            DROP TABLE IF EXISTS feedback_notification;
            """
        ),
        
        # Create the M2M relationship between FeedbackTag and Feedback
        migrations.RunSQL(
            """
            CREATE TABLE IF NOT EXISTS feedback_feedbacktag_feedbacks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                feedbacktag_id bigint NOT NULL REFERENCES feedback_feedbacktag (id),
                feedback_id bigint NOT NULL REFERENCES feedback_feedback (id)
            );
            CREATE INDEX IF NOT EXISTS feedback_feedbacktag_feedbacks_tag_id_feedback_id_idx ON feedback_feedbacktag_feedbacks (feedbacktag_id, feedback_id);
            CREATE INDEX IF NOT EXISTS feedback_feedbacktag_feedbacks_feedback_id_idx ON feedback_feedbacktag_feedbacks (feedback_id);
            """,
            """
            DROP TABLE IF EXISTS feedback_feedbacktag_feedbacks;
            """
        ),
        
        # Create indexes for FeedbackComment
        migrations.RunSQL(
            """
            CREATE INDEX IF NOT EXISTS feedback_feedbackcomment_feedback_created_at_idx ON feedback_feedbackcomment (feedback_id, created_at);
            CREATE INDEX IF NOT EXISTS feedback_feedbackcomment_author_idx ON feedback_feedbackcomment (author_id);
            """,
            """
            DROP INDEX IF EXISTS feedback_feedbackcomment_feedback_created_at_idx;
            DROP INDEX IF EXISTS feedback_feedbackcomment_author_idx;
            """
        ),
        
        # Create indexes for Notification
        migrations.RunSQL(
            """
            CREATE INDEX IF NOT EXISTS feedback_notification_user_is_read_idx ON feedback_notification (user_id, is_read);
            CREATE INDEX IF NOT EXISTS feedback_notification_created_at_idx ON feedback_notification (created_at);
            """,
            """
            DROP INDEX IF EXISTS feedback_notification_user_is_read_idx;
            DROP INDEX IF EXISTS feedback_notification_created_at_idx;
            """
        ),
    ]
